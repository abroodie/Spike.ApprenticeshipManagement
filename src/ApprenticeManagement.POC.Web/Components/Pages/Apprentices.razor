@page "/apprentices"
@using ApprenticeManagement.POC.Common
@rendermode InteractiveServer
@inject ApprenticeManagementServiceClient Client

<PageTitle>Apprentices</PageTitle>

<h3>Apprentices</h3>

@if (employers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var employer in employers)
    {
        <div>
            <p>
                <h5>@employer.Name <a href="/addapprentice/@employer.Account">Add new</a>  </h5>
            </p>

            <ol class="list-group list-group-numbered">
                @foreach (var apprentice in employer.Apprentices)
                {
                    <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-start">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">@apprentice.Name (@apprentice.Uln)</div>
                            @apprentice.Course
                            @if (apprentice.ApprenticeStatus == ApprenticeStatus.Approved)
                            {
                                <div>
                                    <button class="btn btn-primary" @onclick="() => ChangeApprenticeStatus(employer, apprentice)">Simulate status change</button>
                                </div>
                            }
                        </div>
                        <span class="badge bg-primary rounded-pill">@GetDisplayStatus(apprentice.ApprenticeStatus)</span>
                    </li>
                }
            </ol>
            <p>
                @if (employer.Apprentices.Any(a => a.ApprenticeStatus != ApprenticeStatus.Approved))
                {
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button class="btn btn-primary me-md-2" type="button" @onclick="() => SendReminder(employer)">Send Reminder</button>
                    </div>
                }
            </p>
        </div>
    }
}


@* <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <img src="..." class="rounded me-2" alt="...">
            <strong class="me-auto">Apprentice Management</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Sent reminder to users at employer '@selectedEmployerName'
        </div>
    </div>
</div *@>

@code {
    private List<Employer> employers = null;
    private string selectedEmployerName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        employers = await Client.GetEmployers();
    }

    private string GetDisplayStatus(ApprenticeStatus status)
    {
        return status switch
        {
            ApprenticeStatus.New => "Awaiting initial approval",
            ApprenticeStatus.Changed => "Awaiting approval of change",
            _ => status.ToString()
        };
    }

    private async Task ChangeApprenticeStatus(Employer employer, Apprentice apprentice)
    {
        await Client.ChangeApprenticeStatus(employer.Account, apprentice.Uln, ApprenticeStatus.Changed);
        apprentice.ApprenticeStatus = ApprenticeStatus.Changed;
    }

    private async Task SendReminder(Employer employer)
    {
        await Client.SendReminder(employer.Account);
        //selectedEmployerName = employer.Name;
    }
}
